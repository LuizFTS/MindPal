'use client'
// React and NextJS
import { createContext, useEffect, useContext, ReactNode, useReducer } from "react";
import { useRouter } from "next/navigation";

// Back-End Api functions
import { recoverSession, signInAPI } from "@/api";

// Cookies
import Cookies from "js-cookie";

// Types
import { AuthActions, AuthActionsKind, AuthContextType, AuthReducerState, SignInData } from "@/types";



// useReducer function
const authReducer = (authState: AuthReducerState, action: AuthActions) => {
  switch (action.type) {
    case AuthActionsKind.SHOWSIGNINMODAL:
      return { ...authState, signInModal: true }
    case AuthActionsKind.HIDESIGNINMODAL:
      return { ...authState, signInModal: false }
    case AuthActionsKind.SHOWSIGNUPMODAL:
      return { ...authState, signUpModal: true }
    case AuthActionsKind.HIDESIGNUPMODAL:
      return { ...authState, signUpModal: false }
    case AuthActionsKind.CHANGEMODAL:
      if (!authState.signInModal) {
        return { ...authState, signInModal: true, signUpModal: false }
      }
      return { ...authState, signInModal: false, signUpModal: true }
    case AuthActionsKind.SIGNIN:
      if (action.payload) return { ...authState, user: action.payload }

    case AuthActionsKind.SIGNOUT:
      return { ...authState, user: null }
    default:
      return authState
  }
}


// useReducer initial state
const initialState: AuthReducerState = {
  signInModal: false,
  signUpModal: false,
  user: null
}


// Context creation
export const AuthContext = createContext<AuthContextType>({
  isAuthenticated: false,
  signIn: () => { },
  authState: initialState,
  dispatch: () => { }
});


// Context Provider
export const AuthProvider = ({ children }: { children: ReactNode }) => {
  // useRouter called to redirection
  const router = useRouter()

  // auth useReducer initialized
  const [authState, dispatch] = useReducer(authReducer, initialState)

  // Auth verification
  const isAuthenticated = !!authState.user


  // Recover user data from cookies
  useEffect(() => {
    const token = Cookies.get('mindpalID')

    if (typeof token === undefined || token === "undefined") {
      Cookies.remove('mindpalID')
      return
    }

    if (!token) {
      return;
    }
    recoverSession({ token }).then(response => dispatch({ type: AuthActionsKind.SIGNIN, payload: response.user }))
  }, [])


  // SignIn function
  const signIn = async ({ email, password }: SignInData) => {

    const { user, token, errors } = await signInAPI({ email, password })
    // if the data returned doesn't find '_id' in user object, the function will return the error
    if ('_id' in user && token !== undefined) {

      // Set cookies with token generated by the backend with the user id
      Cookies.set('mindpalID', token, { expires: 30 })
      dispatch({ type: AuthActionsKind.SIGNIN, payload: user })

      // when the user sign in, it'll be redirected to mycategories page
      router.push('/mycategories')
      return { token }
    }

    return { errors }
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, signIn, authState, dispatch }}>
      {children}
    </AuthContext.Provider>
  )
}


// Custom hook to use the Auth context
export const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    console.log("Invalid context")
  }
  return context
}